name: Deploy to Yandex Cloud

on:
  push:
    branches: [main]
    paths:
      - 'functions/**'

env:
  YC_SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
  YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
  YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      bot: ${{ steps.changes.outputs.bot }}
      miniapp-api: ${{ steps.changes.outputs.miniapp-api }}
      miniapp-frontend: ${{ steps.changes.outputs.miniapp-frontend }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Detect changed functions
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q '^functions/bot/'; then
            echo "bot=true" >> $GITHUB_OUTPUT
          else
            echo "bot=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q '^functions/miniapp-api/'; then
            echo "miniapp-api=true" >> $GITHUB_OUTPUT
          else
            echo "miniapp-api=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q '^functions/miniapp-frontend/'; then
            echo "miniapp-frontend=true" >> $GITHUB_OUTPUT
          else
            echo "miniapp-frontend=false" >> $GITHUB_OUTPUT
          fi

  deploy-bot:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.bot == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Yandex Cloud CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        sudo mv /home/runner/yandex-cloud/bin/yc /usr/local/bin/yc
        yc version
    
    - name: Authenticate with Yandex Cloud
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
        yc config profile create github-actions
        yc config set service-account-key key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
    
    - name: Deploy bot function
      run: |
        cd functions/bot
        zip -r bot.zip *.go go.mod go.sum
        yc serverless function version create \
          --function-id=d4eqrudr11gga4ooul1b \
          --runtime=golang123 \
          --entrypoint=main.Handler \
          --memory=128@m \
          --execution-timeout=15s \
          --min-log-level=trace \
          --source-path=bot.zip \
          --service-account-id=aje11ekf8scj1bonpe5f \
          --environment TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
          --secret id=e6qbqd22iqgdodsr88h9,version-id=e6qma8o20k79tg7plg9g,key=DATABASE_URL,environment-variable=DATABASE_URL

  deploy-miniapp-api:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.miniapp-api == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Yandex Cloud CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        sudo mv /home/runner/yandex-cloud/bin/yc /usr/local/bin/yc
        yc version
    
    - name: Authenticate with Yandex Cloud
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
        yc config profile create github-actions
        yc config set service-account-key key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
    
    - name: Deploy Mini-App API function
      run: |
        cd functions/miniapp-api
        zip -r miniapp-api.zip *.go go.mod go.sum
        yc serverless function version create \
          --function-id=d4ek5oug8uak4lb9edsl \
          --runtime=golang123 \
          --entrypoint=main.Handler \
          --memory=128m \
          --min-log-level=trace \
          --execution-timeout=15s \
          --source-path=miniapp-api.zip \
          --service-account-id=aje11ekf8scj1bonpe5f \
          --environment TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
          --secret id=e6qbqd22iqgdodsr88h9,version-id=e6qma8o20k79tg7plg9g,key=DATABASE_URL,environment-variable=DATABASE_URL

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.miniapp-frontend == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: functions/miniapp-frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd functions/miniapp-frontend
        npm install
    
    - name: Build frontend
      run: |
        cd functions/miniapp-frontend
        npm run build
    
    - name: Upload to Yandex Cloud Storage
      uses: yc-actions/yc-obj-storage-upload@v2
      with:
        yc-sa-json-credentials: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
        bucket: ${{ secrets.BUCKET_NAME }}
        root: ./functions/miniapp-frontend/build
        include: |
          **/*
        clear: true